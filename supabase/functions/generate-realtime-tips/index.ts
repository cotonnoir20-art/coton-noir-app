import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { hairType, porosity, objective, problems, needs } = await req.json();
    
    console.log('Received profile data:', { hairType, porosity, objective, problems, needs });

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      console.error('OpenAI API key not found');
      return new Response(JSON.stringify({ 
        error: 'OpenAI API key not configured',
        routinePreview: ['Configuration du profil en cours...'],
        cotonTips: ['Compl√©tez votre profil pour des conseils personnalis√©s.']
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Create dynamic system prompt based on profile
    let systemPrompt = `Tu es CotonTips, une experte en soins capillaires textur√©s sp√©cialis√©e dans les cheveux afro, cr√©oles et m√©tiss√©s. 

PROFIL UTILISATRICE:
- Type de cheveux: ${hairType || 'Non sp√©cifi√©'}
- Porosit√©: ${porosity || 'Non sp√©cifi√©e'}
- Objectif principal: ${objective || 'Non sp√©cifi√©'}
- Probl√©matiques: ${problems?.join(', ') || 'Aucune'}
- Besoins: ${needs?.join(', ') || 'Aucun'}

Tu dois g√©n√©rer:
1. Une routine courte (3-4 √©tapes max) adapt√©e AU PROFIL ACTUEL
2. Un conseil personnalis√© (CotonTip) bas√© sur les s√©lections

Sois concise, pratique et bienveillante. Utilise des emojis appropri√©s.`;

    const userPrompt = `G√©n√®re une routine de soins et un conseil personnalis√© pour cette utilisatrice. 

Format de r√©ponse EXACT:
{
  "routinePreview": ["√âtape 1", "√âtape 2", "√âtape 3"],
  "cotonTips": "Un conseil personnalis√© avec emoji"
}

Adapte selon le profil fourni. Si des informations manquent, propose des conseils g√©n√©raux mais encourage √† compl√©ter le profil.`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4.1-2025-04-14',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      console.error('OpenAI API error:', response.status, await response.text());
      return new Response(JSON.stringify({ 
        error: 'Erreur API OpenAI',
        routinePreview: ['Analyse de ton profil...', 'G√©n√©ration des conseils...', 'Personnalisation en cours...'],
        cotonTips: 'üí° Compl√®te ton profil pour des conseils ultra-personnalis√©s !'
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    console.log('OpenAI response:', data);

    let aiResponse;
    try {
      const content = data.choices[0].message.content;
      console.log('AI content:', content);
      
      // Try to parse JSON response
      aiResponse = JSON.parse(content);
    } catch (parseError) {
      console.error('Failed to parse AI response:', parseError);
      
      // Fallback response based on profile
      const fallbackRoutine = [];
      const fallbackTip = "üí° Compl√®te ton profil pour des conseils personnalis√©s !";

      if (hairType && porosity) {
        if (porosity === 'haute') {
          fallbackRoutine.push('Pr√©-shampoing hydratant', 'Shampoing doux', 'Masque prot√©ines-hydratation', 'Leave-in + huile');
        } else if (porosity === 'faible') {
          fallbackRoutine.push('Clarification l√©g√®re', 'Shampoing hydratant', 'Conditioner l√©ger', 'Leave-in sans huiles lourdes');
        } else {
          fallbackRoutine.push('Shampoing hydratant', 'Masque nourrissant', 'Leave-in', 'Huile l√©g√®re sur pointes');
        }
      } else {
        fallbackRoutine.push('Analyse de ton profil...', 'G√©n√©ration des conseils...', 'Personnalisation en cours...');
      }

      aiResponse = {
        routinePreview: fallbackRoutine,
        cotonTips: fallbackTip
      };
    }

    // Ensure we have the right structure
    if (!aiResponse.routinePreview) {
      aiResponse.routinePreview = ['Compl√®te ton profil pour une routine personnalis√©e'];
    }
    if (!aiResponse.cotonTips) {
      aiResponse.cotonTips = 'üí° S√©lectionne tes besoins pour des conseils adapt√©s !';
    }

    console.log('Final response:', aiResponse);

    return new Response(JSON.stringify(aiResponse), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-realtime-tips function:', error);
    return new Response(JSON.stringify({ 
      error: 'Erreur interne',
      routinePreview: ['Erreur temporaire...', 'R√©essaye dans un moment'],
      cotonTips: '‚ö†Ô∏è Erreur temporaire. R√©essaye dans quelques instants.'
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});